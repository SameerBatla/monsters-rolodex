{"version":3,"sources":["components/card/Card.jsx","components/card-list/Cardlist.jsx","components/search-box/Searchbox.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","Cardlist","monsters","map","key","Searchbox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","axios","get","then","response","data","catch","error","console","log","this","filteredMonsters","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2WAgBeA,MAbf,SAAcC,GACZ,OACE,yBAAKC,UAAU,kBACb,yBACEC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BACHC,IAAI,YAEN,4BAAKL,EAAMG,QAAQG,MACnB,2BAAIN,EAAMG,QAAQI,SCGTC,MAVf,SAAkBR,GAChB,OACE,yBAAKC,UAAU,aACZD,EAAMS,SAASC,KAAI,SAAAP,GAClB,OAAO,kBAAC,EAAD,CAAMQ,IAAKR,EAAQC,GAAID,QAASA,S,MCOhCS,MAbf,YAAmD,IAA9BC,EAA6B,EAA7BA,YAAaC,EAAgB,EAAhBA,aAChC,OACE,6BACE,2BACEb,UAAU,SACVc,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCyCHG,G,MA5Cf,YACE,WAAYjB,GAAQ,IAAD,8BACjB,4CAAMA,KAiBRc,aAAe,SAAAI,GACb,EAAKC,SAAS,CACZC,YAAaF,EAAEG,OAAOC,SAjBxB,EAAKC,MAAQ,CACXd,SAAU,GACVW,YAAa,IALE,EADrB,iFASuB,IAAD,OAClBI,IACGC,IAAI,8CACJC,MAAK,SAAAC,GAAQ,OACZ,EAAKR,SAAS,CACZV,SAAUkB,EAASC,UAGtBC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,QAjBlC,+BAwBY,IAAD,EAC2BG,KAAKV,MAA/Bd,EADD,EACCA,SAAUW,EADX,EACWA,YACZc,EAAmBzB,EAAS0B,QAAO,SAAAhC,GAAO,OAC9CA,EAAQG,KAAK8B,cAAcC,SAASjB,EAAYgB,kBAElD,OACE,6BAME,gDACA,kBAAC,EAAD,CAAWvB,YAAY,cAAcC,aAAcmB,KAAKnB,eACxD,kBAAC,EAAD,CAAUL,SAAUyB,SAtC5B,GAAyBI,cCMLC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,MAAK,SAAAyB,GACjCA,EAAaC,kB","file":"static/js/main.efc62989.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./card.styles.css\";\r\n\r\nfunction Card(props) {\r\n  return (\r\n    <div className=\"card-container\">\r\n      <img\r\n        src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\r\n        alt=\"monster\"\r\n      />\r\n      <h2>{props.monster.name}</h2>\r\n      <p>{props.monster.email}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport \"./card-list.styles.css\";\r\nimport Card from \"../card/Card\";\r\n\r\nfunction Cardlist(props) {\r\n  return (\r\n    <div className=\"card-list\">\r\n      {props.monsters.map(monster => {\r\n        return <Card key={monster.id} monster={monster} />;\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Cardlist;\r\n","import React from \"react\";\r\nimport \"./search-box.styles.css\";\r\nfunction Searchbox({ placeholder, handleChange }) {\r\n  return (\r\n    <div>\r\n      <input\r\n        className=\"search\"\r\n        type=\"search\"\r\n        placeholder={placeholder}\r\n        onChange={handleChange}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Searchbox;\r\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport Cardlist from \"./components/card-list/Cardlist\";\nimport Searchbox from \"./components/search-box/Searchbox\";\nimport \"../src/App.css\";\n\nexport class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      monsters: [],\n      searchField: \"\"\n    };\n  }\n  componentDidMount() {\n    axios\n      .get(\"https://jsonplaceholder.typicode.com/users\")\n      .then(response =>\n        this.setState({\n          monsters: response.data\n        })\n      )\n      .catch(error => console.log(error));\n  }\n  handleChange = e => {\n    this.setState({\n      searchField: e.target.value\n    });\n  };\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n    return (\n      <div>\n        {/* <input\n          type=\"search\"\n          placeholder=\"Search here\"\n          onChange={this.handleChange}\n        /> */}\n        <h1>MONSTERS ROLODEX</h1>\n        <Searchbox placeholder=\"Search Here\" handleChange={this.handleChange} />\n        <Cardlist monsters={filteredMonsters}></Cardlist>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}